import React from 'react';
import PropTypes from 'prop-types';
import { useDragLayer } from 'react-dnd';
var PreviewContext = React.createContext();

var getStyle = function getStyle(currentOffset) {
  var transform = "translate(".concat(currentOffset.x, "px, ").concat(currentOffset.y, "px)");
  return {
    pointerEvents: 'none',
    position: 'fixed',
    top: 0,
    left: 0,
    transform: transform,
    WebkitTransform: transform
  };
};

var Preview = function Preview(props) {
  var collectedProps = useDragLayer(function (monitor) {
    return {
      currentOffset: monitor.getSourceClientOffset(),
      isDragging: monitor.isDragging(),
      itemType: monitor.getItemType(),
      item: monitor.getItem()
    };
  });

  if (!collectedProps.isDragging || collectedProps.currentOffset === null) {
    return null;
  }

  var data = {
    itemType: collectedProps.itemType,
    item: collectedProps.item,
    style: getStyle(collectedProps.currentOffset)
  };
  var child;

  if (props.children && typeof props.children === 'function') {
    child = props.children(data);
  } else if (props.children) {
    child = props.children;
  } else {
    child = props.generator(data);
  }

  return /*#__PURE__*/React.createElement(PreviewContext.Provider, {
    value: data
  }, child);
};

Preview.propTypes = {
  generator: PropTypes.func,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func])
};
export var Context = PreviewContext;
export default Preview;